{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnClick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","TodoList","todoList","map","TODO_APP_STORAGE_KEY","App","useState","setTodoList","textInput","setTextInput","useEffect","storagedTodolist","localStorage","getItem","JSON","parse","setItem","stringify","ontextInputChange","useCallback","e","target","value","onAddButtonClick","v4","OnCheckBtnClick","prevState","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAMMA,EAAeC,YAAOC,IAAPD,CAAH,0XAKR,SAAAE,GAAC,OAAGA,EAAEC,aACJC,YADE,uFA0BC,SAASC,EAAT,GACd,IAD6BC,EAC9B,EAD8BA,KAAMC,EACpC,EADoCA,gBAEhC,OAAO,cAACR,EAAD,CACHI,YAAeG,EAAKH,YACpBK,oBAAkB,EAClBC,WACKH,EAAKH,aACN,sBAAMO,UAAU,aAAaC,QAAS,kBAAIJ,EAAgBD,EAAKM,KAA/D,SACI,cAAC,IAAD,CAAWC,aAAa,cAN7B,SAQLP,EAAKQ,OC5CI,SAASC,EAAT,GAA+C,IAA5BC,EAA2B,EAA3BA,SAAUT,EAAiB,EAAjBA,gBACxC,OACI,8BAEIS,EAASC,KAAI,SAAAX,GAAI,OACjB,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,GAAtCD,EAAKM,S,oBCDtBM,EAAuB,WAwDdC,MAtDf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQT,GAC1CO,GAEFJ,EAAYO,KAAKC,MAAMJ,MAEzB,IAEFD,qBAAU,WACRE,aAAaI,QAAQZ,EAAsBU,KAAKG,UAAUf,MAC1D,CAACA,IAKH,IAAMgB,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACtB,IAEIC,EAAmBJ,uBAAY,SAACC,GAEpCb,EAAY,GAAD,mBAAKL,GAAL,CACT,CAACJ,GAAI0B,cAAOxB,KAAMQ,EAAWnB,aAAa,MAG5CoB,EAAa,MACb,CAACD,EAAUN,IAGPuB,EAAkBN,uBAAY,SAACrB,GACnCS,GAAY,SAACmB,GAAD,OAAcA,EAAUvB,KAAI,SAACX,GAAD,OAAUA,EAAKM,KAAOA,EAAZ,2BAAqBN,GAArB,IAA2BH,aAAY,IAAMG,UAC/F,IAGF,OACE,gCACA,+DACA,cAAC,IAAD,CAAWQ,KAAK,WAAW2B,YAAY,wCAAwBC,eAC7D,cAAC,IAAD,CAAQC,YAAarB,EAAWsB,WAAW,UAAUjC,QAAS0B,EAA9D,qBAEFjC,IAAK,CAACyC,QAAQ,eACdT,MAAOd,EACPwB,SAAUd,IAEV,cAACjB,EAAD,CAAUC,SAAUA,EAAUT,gBAAiBgC,QCrDnDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9078e07b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from '@atlaskit/button';\r\nimport styled, {css} from 'styled-components';\r\nimport CheckIcon from '@atlaskit/icon/glyph/check'\r\n\r\n\r\nconst ButtonStyled = styled(Button)`\r\n    margin-top:5px;\r\n    text-align: left;\r\n    \r\n    &,&:hover{\r\n        ${p=> p.isCompleted && \r\n            css`\r\n            text-decoration: line-through;\r\n            `\r\n    \r\n        }\r\n\r\n    }\r\n\r\n    &:hover {\r\n        .check-icon{\r\n            display: inline-block;\r\n        }\r\n    }\r\n   \r\n\r\n    .check-icon{\r\n        display:    none;\r\n\r\n        &:hover{\r\n            background-color: #e2e2e2;\r\n            border-radius: 3px;\r\n        }\r\n    }\r\n    \r\n`;\r\nexport default function Todo({todo, onCheckBtnClick})\r\n{\r\n    return <ButtonStyled\r\n        isCompleted = {todo.isCompleted} \r\n        shouldFitContainer \r\n        iconAfter={\r\n            !todo.isCompleted &&(\r\n            <span className=\"check-icon\" onClick={()=>onCheckBtnClick(todo.id)}> \r\n                <CheckIcon primaryColor='#4fff4f'/>\r\n            </span>)}\r\n    >{todo.name}</ButtonStyled>;\r\n}","import React from \"react\"\r\nimport Todo from \"./Todo\"\r\n\r\nexport default function TodoList({todoList, onCheckBtnClick}){\r\n    return(\r\n        <div>\r\n            {\r\n            todoList.map(todo => (\r\n            <Todo key={todo.id} todo={todo} onCheckBtnClick={onCheckBtnClick} />))\r\n            }\r\n        </div>\r\n    )\r\n}","\nimport TodoList from \"./components/TodoList\";\nimport Textfield from '@atlaskit/textfield'\nimport Button from '@atlaskit/button';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { v4 } from 'uuid'\n\nconst TODO_APP_STORAGE_KEY = 'TODO_APP';\n\nfunction App() {\n  //state, props\n  const [todoList, setTodoList] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  useEffect(()=>{\n    const storagedTodolist = localStorage.getItem(TODO_APP_STORAGE_KEY)\n    if (storagedTodolist)\n    {\n      setTodoList(JSON.parse(storagedTodolist))\n    }\n  },[])\n\n  useEffect(()=> {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n  },[todoList])\n\n\n\n\n  const ontextInputChange = useCallback((e) =>{\n    setTextInput(e.target.value); //nguoi dung nhap vo the input\n  },[]);\n\n  const onAddButtonClick = useCallback((e) => {\n    //them TextInput vao danh sach TodoList\n    setTodoList([...todoList, \n      {id: v4() , name: textInput, isCompleted: false},\n    ]);\n\n    setTextInput(\"\");\n  },[textInput,todoList]);\n\n\n  const OnCheckBtnClick = useCallback((id)=>{\n    setTodoList((prevState)=> prevState.map((todo) => todo.id === id ? {...todo, isCompleted:true}:todo))\n  },[]);\n\n\n  return (\n    <div>\n    <h3>Danh sách cần làm </h3>\n    <Textfield name=\"add-todo\" placeholder=\"Thêm việc cần làm... \" elemAfterInput={\n      <Button isDisabled={!textInput} appearance=\"primary\" onClick={onAddButtonClick}>Thêm</Button>\n    } \n    css={{padding:\"2px 4px 2px\"}}\n    value={textInput}\n    onChange={ontextInputChange}\n    ></Textfield>\n    <TodoList todoList={todoList} onCheckBtnClick={OnCheckBtnClick} />\n    </div>  \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}